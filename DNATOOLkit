# DNA Tool Kit File
import collections
from structures import *
# Check sequence to make sure it is a DNA String


def validateSeq(dna_seq):
    """ensures sequence only contains nuclotides and changes lower to upper case"""
    tmpseq = dna_seq.upper()
    for nuc in tmpseq:
        if nuc not in Nucleotides:
            return False
    return tmpseq


def countNucFrequency(seq):
    """counts frequency of each nucleotide type"""
    #  tmpFreqDict = {"A": 0, "C": 0, "G": 0, "T": 0}
    #  for nuc in seq:
   #     tmpFreqDict[nuc] += 1
    #  return tmpFreqDict
    return dict(collections.Counter(seq))


def transcription(seq):
    """ DNA -> RNA Transcription. Replace Thymine with Uracil"""
    return seq.replace("T", "U")


def reverse_compliment(seq):
    """Swap Adenine with Thymine and Guanine with Cytosine. 
    Reverses newly generated string to start at 5' end"""
    # universal code vvvv
    # return ''.join([DNA_ReverseComplement[nuc] for nuc in seq])[::-1]

    # Pythonic approach
    mapping = str.maketrans('ATCG', "TAGC")
    return seq.translate(mapping)[::-1]


def gc_content(seq):
    """GC content in a DNA/RNA sequence percentage"""
    return round((seq.count('C') + seq.count('G')) / len(seq) * 100)


def gc_content_subsec(seq, k=20):
    """GC Content in DNA/RNA sub-sequence length k, k=20 by default"""
    res = []
    for i in range(0, len(seq) - k + 1, k):
        subseq = seq[i:i + k]
        res.append(gc_content(subseq))
        return res

